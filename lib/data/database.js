"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert = require("assert");
const createDebug = require("debug");
const service_1 = require("../runtime/service");
const debug = createDebug('denali:database-service');
class DatabaseService extends service_1.default {
    find(modelType, id, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            debug(`${modelType} find: ${id}`);
            assert(id != null, `You must pass an id to Model.find(id)`);
            let adapter = this.lookupAdapter(modelType);
            let result = yield adapter.find(modelType, id, options);
            if (!result) {
                return null;
            }
            let ModelFactory = this.container.factoryFor(`model:${modelType}`);
            return ModelFactory.create(result);
        });
    }
    queryOne(modelType, query, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            debug(`${modelType} queryOne: ${query}`);
            assert(query != null, `You must pass a query to Model.queryOne(conditions)`);
            let adapter = this.lookupAdapter(modelType);
            let record = yield adapter.queryOne(modelType, query, options);
            if (record) {
                let ModelFactory = this.container.factoryFor(`model:${modelType}`);
                return ModelFactory.create(record);
            }
            return null;
        });
    }
    query(modelType, query, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            debug(`${modelType} query: ${query}`);
            assert(query != null, `You must pass a query to Model.query(conditions)`);
            let adapter = this.lookupAdapter(modelType);
            let result = yield adapter.query(modelType, query, options);
            let ModelFactory = this.container.factoryFor(`model:${modelType}`);
            return result.map((record) => {
                return ModelFactory.create(record);
            });
        });
    }
    all(modelType, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            debug(`${modelType} all`);
            let adapter = this.lookupAdapter(modelType);
            let result = yield adapter.all(modelType, options);
            let ModelFactory = this.container.factoryFor(`model:${modelType}`);
            return result.map((record) => {
                return ModelFactory.create(record);
            });
        });
    }
    create(modelType, data, options) {
        return this.container.factoryFor(`model:${modelType}`).create(data, options);
    }
    lookupAdapter(modelType) {
        return this.container.lookup(`orm-adapter:${modelType}`, { loose: true }) || this.container.lookup('orm-adapter:application');
    }
}
exports.default = DatabaseService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FjYnVyZGluZS9Qcm9qZWN0cy9kZW5hbGkvZGVuYWxpLyIsInNvdXJjZXMiOlsibGliL2RhdGEvZGF0YWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWlDO0FBQ2pDLHFDQUFxQztBQUNyQyxnREFBeUM7QUFJekMsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFFckQscUJBQXFDLFNBQVEsaUJBQU87SUFFNUMsSUFBSSxDQUFDLFNBQWlCLEVBQUUsRUFBTyxFQUFFLE9BQWE7O1lBQ2xELEtBQUssQ0FBQyxHQUFJLFNBQVUsVUFBVyxFQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFLHVDQUF1QyxDQUFDLENBQUM7WUFDNUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM1QyxJQUFJLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN4RCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ1osTUFBTSxDQUFDLElBQUksQ0FBQztZQUNkLENBQUM7WUFDRCxJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBUSxTQUFVLFNBQVUsRUFBRSxDQUFDLENBQUM7WUFDNUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckMsQ0FBQztLQUFBO0lBRUssUUFBUSxDQUFDLFNBQWlCLEVBQUUsS0FBVSxFQUFFLE9BQWE7O1lBQ3pELEtBQUssQ0FBQyxHQUFJLFNBQVUsY0FBZSxLQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFLHFEQUFxRCxDQUFDLENBQUM7WUFDN0UsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM1QyxJQUFJLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztZQUMvRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNYLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFRLFNBQVUsU0FBVSxFQUFFLENBQUMsQ0FBQztnQkFDNUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckMsQ0FBQztZQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO0tBQUE7SUFFSyxLQUFLLENBQUMsU0FBaUIsRUFBRSxLQUFVLEVBQUUsT0FBYTs7WUFDdEQsS0FBSyxDQUFDLEdBQUksU0FBVSxXQUFZLEtBQU0sRUFBRSxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUUsa0RBQWtELENBQUMsQ0FBQztZQUMxRSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVDLElBQUksTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzVELElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFRLFNBQVUsU0FBVSxFQUFFLENBQUMsQ0FBQztZQUM1RSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Z0JBQ3ZCLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUFBO0lBRUssR0FBRyxDQUFDLFNBQWlCLEVBQUUsT0FBYTs7WUFDeEMsS0FBSyxDQUFDLEdBQUksU0FBVSxNQUFNLENBQUMsQ0FBQztZQUM1QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVDLElBQUksTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDbkQsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQVEsU0FBVSxTQUFVLEVBQUUsQ0FBQyxDQUFDO1lBQzVFLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTTtnQkFDdkIsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQUE7SUFFRCxNQUFNLENBQUMsU0FBaUIsRUFBRSxJQUFTLEVBQUUsT0FBYTtRQUNoRCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQVEsU0FBVSxTQUFVLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVTLGFBQWEsQ0FBQyxTQUFpQjtRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQWEsZUFBZ0IsU0FBVSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBYSx5QkFBeUIsQ0FBQyxDQUFDO0lBQzFKLENBQUM7Q0FFRjtBQXZERCxrQ0F1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCAqIGFzIGNyZWF0ZURlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBTZXJ2aWNlIGZyb20gJy4uL3J1bnRpbWUvc2VydmljZSc7XG5pbXBvcnQgTW9kZWwgZnJvbSAnLi9tb2RlbCc7XG5pbXBvcnQgT1JNQWRhcHRlciBmcm9tICcuL29ybS1hZGFwdGVyJztcblxuY29uc3QgZGVidWcgPSBjcmVhdGVEZWJ1ZygnZGVuYWxpOmRhdGFiYXNlLXNlcnZpY2UnKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YWJhc2VTZXJ2aWNlIGV4dGVuZHMgU2VydmljZSB7XG5cbiAgYXN5bmMgZmluZChtb2RlbFR5cGU6IHN0cmluZywgaWQ6IGFueSwgb3B0aW9ucz86IGFueSk6IFByb21pc2U8TW9kZWx8bnVsbD4ge1xuICAgIGRlYnVnKGAkeyBtb2RlbFR5cGUgfSBmaW5kOiAkeyBpZCB9YCk7XG4gICAgYXNzZXJ0KGlkICE9IG51bGwsIGBZb3UgbXVzdCBwYXNzIGFuIGlkIHRvIE1vZGVsLmZpbmQoaWQpYCk7XG4gICAgbGV0IGFkYXB0ZXIgPSB0aGlzLmxvb2t1cEFkYXB0ZXIobW9kZWxUeXBlKTtcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgYWRhcHRlci5maW5kKG1vZGVsVHlwZSwgaWQsIG9wdGlvbnMpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IE1vZGVsRmFjdG9yeSA9IHRoaXMuY29udGFpbmVyLmZhY3RvcnlGb3I8TW9kZWw+KGBtb2RlbDokeyBtb2RlbFR5cGUgfWApO1xuICAgIHJldHVybiBNb2RlbEZhY3RvcnkuY3JlYXRlKHJlc3VsdCk7XG4gIH1cblxuICBhc3luYyBxdWVyeU9uZShtb2RlbFR5cGU6IHN0cmluZywgcXVlcnk6IGFueSwgb3B0aW9ucz86IGFueSk6IFByb21pc2U8TW9kZWx8bnVsbD4ge1xuICAgIGRlYnVnKGAkeyBtb2RlbFR5cGUgfSBxdWVyeU9uZTogJHsgcXVlcnkgfWApO1xuICAgIGFzc2VydChxdWVyeSAhPSBudWxsLCBgWW91IG11c3QgcGFzcyBhIHF1ZXJ5IHRvIE1vZGVsLnF1ZXJ5T25lKGNvbmRpdGlvbnMpYCk7XG4gICAgbGV0IGFkYXB0ZXIgPSB0aGlzLmxvb2t1cEFkYXB0ZXIobW9kZWxUeXBlKTtcbiAgICBsZXQgcmVjb3JkID0gYXdhaXQgYWRhcHRlci5xdWVyeU9uZShtb2RlbFR5cGUsIHF1ZXJ5LCBvcHRpb25zKTtcbiAgICBpZiAocmVjb3JkKSB7XG4gICAgICBsZXQgTW9kZWxGYWN0b3J5ID0gdGhpcy5jb250YWluZXIuZmFjdG9yeUZvcjxNb2RlbD4oYG1vZGVsOiR7IG1vZGVsVHlwZSB9YCk7XG4gICAgICByZXR1cm4gTW9kZWxGYWN0b3J5LmNyZWF0ZShyZWNvcmQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIHF1ZXJ5KG1vZGVsVHlwZTogc3RyaW5nLCBxdWVyeTogYW55LCBvcHRpb25zPzogYW55KTogUHJvbWlzZTxNb2RlbFtdPiB7XG4gICAgZGVidWcoYCR7IG1vZGVsVHlwZSB9IHF1ZXJ5OiAkeyBxdWVyeSB9YCk7XG4gICAgYXNzZXJ0KHF1ZXJ5ICE9IG51bGwsIGBZb3UgbXVzdCBwYXNzIGEgcXVlcnkgdG8gTW9kZWwucXVlcnkoY29uZGl0aW9ucylgKTtcbiAgICBsZXQgYWRhcHRlciA9IHRoaXMubG9va3VwQWRhcHRlcihtb2RlbFR5cGUpO1xuICAgIGxldCByZXN1bHQgPSBhd2FpdCBhZGFwdGVyLnF1ZXJ5KG1vZGVsVHlwZSwgcXVlcnksIG9wdGlvbnMpO1xuICAgIGxldCBNb2RlbEZhY3RvcnkgPSB0aGlzLmNvbnRhaW5lci5mYWN0b3J5Rm9yPE1vZGVsPihgbW9kZWw6JHsgbW9kZWxUeXBlIH1gKTtcbiAgICByZXR1cm4gcmVzdWx0Lm1hcCgocmVjb3JkKSA9PiB7XG4gICAgICByZXR1cm4gTW9kZWxGYWN0b3J5LmNyZWF0ZShyZWNvcmQpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgYWxsKG1vZGVsVHlwZTogc3RyaW5nLCBvcHRpb25zPzogYW55KTogUHJvbWlzZTxNb2RlbFtdPiB7XG4gICAgZGVidWcoYCR7IG1vZGVsVHlwZSB9IGFsbGApO1xuICAgIGxldCBhZGFwdGVyID0gdGhpcy5sb29rdXBBZGFwdGVyKG1vZGVsVHlwZSk7XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IGFkYXB0ZXIuYWxsKG1vZGVsVHlwZSwgb3B0aW9ucyk7XG4gICAgbGV0IE1vZGVsRmFjdG9yeSA9IHRoaXMuY29udGFpbmVyLmZhY3RvcnlGb3I8TW9kZWw+KGBtb2RlbDokeyBtb2RlbFR5cGUgfWApO1xuICAgIHJldHVybiByZXN1bHQubWFwKChyZWNvcmQpID0+IHtcbiAgICAgIHJldHVybiBNb2RlbEZhY3RvcnkuY3JlYXRlKHJlY29yZCk7XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGUobW9kZWxUeXBlOiBzdHJpbmcsIGRhdGE6IGFueSwgb3B0aW9ucz86IGFueSk6IE1vZGVsIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXIuZmFjdG9yeUZvcjxNb2RlbD4oYG1vZGVsOiR7IG1vZGVsVHlwZSB9YCkuY3JlYXRlKGRhdGEsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGxvb2t1cEFkYXB0ZXIobW9kZWxUeXBlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXIubG9va3VwPE9STUFkYXB0ZXI+KGBvcm0tYWRhcHRlcjokeyBtb2RlbFR5cGUgfWAsIHsgbG9vc2U6IHRydWUgfSkgfHwgdGhpcy5jb250YWluZXIubG9va3VwPE9STUFkYXB0ZXI+KCdvcm0tYWRhcHRlcjphcHBsaWNhdGlvbicpO1xuICB9XG5cbn1cbiJdfQ==