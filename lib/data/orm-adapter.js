"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const object_1 = require("../metal/object");
/**
 * The ORMAdapter class is responsible for enabling Denali to communicate with the ORM of your
 * choice. It does this by boiling down the possible actions that a user might before against a
 * Model that would involve persistence into a set of basic operations. Your adapter then implements
 * these operations, and Denali can build on top of that.
 *
 * @package data
 */
class ORMAdapter extends object_1.default {
    /**
     * Takes an array of Denali Models and defines an ORM specific model class, and/or any other ORM
     * specific setup that might be required for that Model.
     */
    defineModels(models) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // defaults to no-op
        });
    }
}
exports.default = ORMAdapter;
//# sourceMappingURL=data:application/json;base64,