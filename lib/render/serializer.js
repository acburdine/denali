"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const view_1 = require("./view");
/**
 * Serializers allow you to customize what data is returned in the response and apply simple
 * transformations to it. They allow you to decouple what data is sent from how that data is
 * structured / rendered.
 *
 * @package data
 */
class Serializer extends view_1.default {
    constructor() {
        super(...arguments);
        this.contentType = 'application/json';
    }
    render(action, response, body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            response.setHeader('Content-type', this.contentType);
            body = yield this.serialize(action, body, options);
            let isProduction = this.container.lookup('config:environment').environment === 'production';
            response.write(JSON.stringify(body, null, isProduction ? 0 : 2) || '');
            response.end();
        });
    }
}
exports.default = Serializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYWJ1cmRpbmUvUHJvamVjdHMvZGVuYWxpL21haW4vIiwic291cmNlcyI6WyJsaWIvcmVuZGVyL3NlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQTBCO0FBVTFCOzs7Ozs7R0FNRztBQUNILGdCQUF5QyxTQUFRLGNBQUk7SUFBckQ7O1FBRVksZ0JBQVcsR0FBRyxrQkFBa0IsQ0FBQztJQW1DN0MsQ0FBQztJQVZPLE1BQU0sQ0FBQyxNQUFjLEVBQUUsUUFBd0IsRUFBRSxJQUFTLEVBQUUsT0FBc0I7O1lBQ3RGLFFBQVEsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNyRCxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDbkQsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxXQUFXLEtBQUssWUFBWSxDQUFDO1lBQzVGLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUcsSUFBSSxFQUFFLFlBQVksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDeEUsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLENBQUM7S0FBQTtDQUlGO0FBckNELDZCQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWaWV3IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgeyBTZXJ2ZXJSZXNwb25zZSB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0IEFjdGlvbiwgeyBSZW5kZXJPcHRpb25zIH0gZnJvbSAnLi4vcnVudGltZS9hY3Rpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlbGF0aW9uc2hpcENvbmZpZyB7XG4gIHN0cmF0ZWd5PzogJ2VtYmVkJyB8ICdpZCcgfCBzdHJpbmc7XG4gIGtleT86IHN0cmluZztcbiAgc2VyaWFsaXplcj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBTZXJpYWxpemVycyBhbGxvdyB5b3UgdG8gY3VzdG9taXplIHdoYXQgZGF0YSBpcyByZXR1cm5lZCBpbiB0aGUgcmVzcG9uc2UgYW5kIGFwcGx5IHNpbXBsZVxuICogdHJhbnNmb3JtYXRpb25zIHRvIGl0LiBUaGV5IGFsbG93IHlvdSB0byBkZWNvdXBsZSB3aGF0IGRhdGEgaXMgc2VudCBmcm9tIGhvdyB0aGF0IGRhdGEgaXNcbiAqIHN0cnVjdHVyZWQgLyByZW5kZXJlZC5cbiAqXG4gKiBAcGFja2FnZSBkYXRhXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIFNlcmlhbGl6ZXIgZXh0ZW5kcyBWaWV3IHtcblxuICBwcm90ZWN0ZWQgY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGF0dHJpYnV0ZSBuYW1lcyB0aGF0IHNob3VsZCBiZSBzZXJpYWxpemVkLiBBdHRyaWJ1dGVzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGxpc3RcbiAgICogd2lsbCBiZSBvbWl0dGVkIGZyb20gdGhlIGZpbmFsIHJlbmRlcmVkIHBheWxvYWQuXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3QgYXR0cmlidXRlczogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCB3aXRoIGNvbmZpZ3VyYXRpb24gb24gaG93IHRvIHNlcmlhbGl6ZSByZWxhdGlvbnNoaXBzLiBSZWxhdGlvbnNoaXBzIHRoYXQgaGF2ZSBub1xuICAgKiBjb25maWd1cmF0aW9uIHByZXNlbnQgYXJlIG9taXR0ZWQgZnJvbSB0aGUgZmluYWwgcmVuZGVyZWQgcGF5bG9hZC5cbiAgICpcbiAgICogT3V0IG9mIHRoZSBib3gsIG9uZSBvcHRpb24gaXMgc3VwcG9ydGVkOlxuICAgKlxuICAgKiAqKnN0cmF0ZWd5KipcbiAgICpcbiAgICogSXQgaGFzIG9uZSBvZiB0d28gcG9zc2libGUgdmFsdWVzOlxuICAgKlxuICAgKiAgICogYGVtYmVkYDogZW1iZWQgYWxsIHJlbGF0ZWQgcmVjb3JkcyBpbiB0aGUgcmVzcG9uc2UgcGF5bG9hZFxuICAgKiAgICogYGlkYDogaW5jbHVkZSBvbmx5IHRoZSBpZCBvZiB0aGUgcmVsYXRlZCByZWNvcmQocylcbiAgICpcbiAgICogV2hhdCB0aGUgZW1iZWRkZWQgcmVjb3JkcyBvciBpZHMgbG9vayBsaWtlIGlzIHVwIHRvIGVhY2ggc2VyaWFsaXplciB0byBkZXRlcm1pbmUuXG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmVsYXRpb25zaGlwczogeyBbIHJlbGF0aW9uc2hpcE5hbWU6IHN0cmluZyBdOiBSZWxhdGlvbnNoaXBDb25maWcgfTtcblxuICBhc3luYyByZW5kZXIoYWN0aW9uOiBBY3Rpb24sIHJlc3BvbnNlOiBTZXJ2ZXJSZXNwb25zZSwgYm9keTogYW55LCBvcHRpb25zOiBSZW5kZXJPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmVzcG9uc2Uuc2V0SGVhZGVyKCdDb250ZW50LXR5cGUnLCB0aGlzLmNvbnRlbnRUeXBlKTtcbiAgICBib2R5ID0gYXdhaXQgdGhpcy5zZXJpYWxpemUoYWN0aW9uLCBib2R5LCBvcHRpb25zKTtcbiAgICBsZXQgaXNQcm9kdWN0aW9uID0gdGhpcy5jb250YWluZXIubG9va3VwKCdjb25maWc6ZW52aXJvbm1lbnQnKS5lbnZpcm9ubWVudCA9PT0gJ3Byb2R1Y3Rpb24nO1xuICAgIHJlc3BvbnNlLndyaXRlKEpTT04uc3RyaW5naWZ5KGJvZHkgLCBudWxsLCBpc1Byb2R1Y3Rpb24gPyAwIDogMikgfHwgJycpO1xuICAgIHJlc3BvbnNlLmVuZCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGFzeW5jIHNlcmlhbGl6ZShhY3Rpb246IEFjdGlvbiwgYm9keTogYW55LCBvcHRpb25zOiBSZW5kZXJPcHRpb25zKTogUHJvbWlzZTxhbnk+O1xuXG59XG4iXX0=