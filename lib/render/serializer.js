"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const view_1 = require("./view");
const errors_1 = require("../runtime/errors");
/**
 * Serializers allow you to customize what data is returned in the response and apply simple
 * transformations to it. They allow you to decouple what data is sent from how that data is
 * structured / rendered.
 *
 * @package data
 */
class Serializer extends view_1.default {
    constructor() {
        super(...arguments);
        this.contentType = 'application/json';
    }
    render(action, response, body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            response.setHeader('Content-type', this.contentType);
            if (body instanceof errors_1.default.HttpError) {
                response.statusCode = body.status;
            }
            body = yield this.serialize(action, body, options);
            let isProduction = this.container.lookup('config:environment').environment === 'production';
            response.write(JSON.stringify(body, null, isProduction ? 0 : 2) || '');
            response.end();
        });
    }
}
exports.default = Serializer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYWNidXJkaW5lL1Byb2plY3RzL2RlbmFsaS9kZW5hbGkvIiwic291cmNlcyI6WyJsaWIvcmVuZGVyL3NlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQTBCO0FBRzFCLDhDQUF1QztBQVF2Qzs7Ozs7O0dBTUc7QUFDSCxnQkFBeUMsU0FBUSxjQUFJO0lBQXJEOztRQUVZLGdCQUFXLEdBQUcsa0JBQWtCLENBQUM7SUFzQzdDLENBQUM7SUFiTyxNQUFNLENBQUMsTUFBYyxFQUFFLFFBQXdCLEVBQUUsSUFBUyxFQUFFLE9BQXNCOztZQUN0RixRQUFRLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDckQsRUFBRSxDQUFDLENBQUMsSUFBSSxZQUFZLGdCQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDckMsUUFBUSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ3BDLENBQUM7WUFDRCxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDbkQsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxXQUFXLEtBQUssWUFBWSxDQUFDO1lBQzVGLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUcsSUFBSSxFQUFFLFlBQVksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDeEUsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLENBQUM7S0FBQTtDQUlGO0FBeENELDZCQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWaWV3IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgeyBTZXJ2ZXJSZXNwb25zZSB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0IEFjdGlvbiwgeyBSZW5kZXJPcHRpb25zIH0gZnJvbSAnLi4vcnVudGltZS9hY3Rpb24nO1xuaW1wb3J0IEVycm9ycyBmcm9tICcuLi9ydW50aW1lL2Vycm9ycyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVsYXRpb25zaGlwQ29uZmlnIHtcbiAgc3RyYXRlZ3k/OiAnZW1iZWQnIHwgJ2lkJyB8IHN0cmluZztcbiAga2V5Pzogc3RyaW5nO1xuICBzZXJpYWxpemVyPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFNlcmlhbGl6ZXJzIGFsbG93IHlvdSB0byBjdXN0b21pemUgd2hhdCBkYXRhIGlzIHJldHVybmVkIGluIHRoZSByZXNwb25zZSBhbmQgYXBwbHkgc2ltcGxlXG4gKiB0cmFuc2Zvcm1hdGlvbnMgdG8gaXQuIFRoZXkgYWxsb3cgeW91IHRvIGRlY291cGxlIHdoYXQgZGF0YSBpcyBzZW50IGZyb20gaG93IHRoYXQgZGF0YSBpc1xuICogc3RydWN0dXJlZCAvIHJlbmRlcmVkLlxuICpcbiAqIEBwYWNrYWdlIGRhdGFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgU2VyaWFsaXplciBleHRlbmRzIFZpZXcge1xuXG4gIHByb3RlY3RlZCBjb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgYXR0cmlidXRlIG5hbWVzIHRoYXQgc2hvdWxkIGJlIHNlcmlhbGl6ZWQuIEF0dHJpYnV0ZXMgbm90IGluY2x1ZGVkIGluIHRoaXMgbGlzdFxuICAgKiB3aWxsIGJlIG9taXR0ZWQgZnJvbSB0aGUgZmluYWwgcmVuZGVyZWQgcGF5bG9hZC5cbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBhdHRyaWJ1dGVzOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogQW4gb2JqZWN0IHdpdGggY29uZmlndXJhdGlvbiBvbiBob3cgdG8gc2VyaWFsaXplIHJlbGF0aW9uc2hpcHMuIFJlbGF0aW9uc2hpcHMgdGhhdCBoYXZlIG5vXG4gICAqIGNvbmZpZ3VyYXRpb24gcHJlc2VudCBhcmUgb21pdHRlZCBmcm9tIHRoZSBmaW5hbCByZW5kZXJlZCBwYXlsb2FkLlxuICAgKlxuICAgKiBPdXQgb2YgdGhlIGJveCwgb25lIG9wdGlvbiBpcyBzdXBwb3J0ZWQ6XG4gICAqXG4gICAqICoqc3RyYXRlZ3kqKlxuICAgKlxuICAgKiBJdCBoYXMgb25lIG9mIHR3byBwb3NzaWJsZSB2YWx1ZXM6XG4gICAqXG4gICAqICAgKiBgZW1iZWRgOiBlbWJlZCBhbGwgcmVsYXRlZCByZWNvcmRzIGluIHRoZSByZXNwb25zZSBwYXlsb2FkXG4gICAqICAgKiBgaWRgOiBpbmNsdWRlIG9ubHkgdGhlIGlkIG9mIHRoZSByZWxhdGVkIHJlY29yZChzKVxuICAgKlxuICAgKiBXaGF0IHRoZSBlbWJlZGRlZCByZWNvcmRzIG9yIGlkcyBsb29rIGxpa2UgaXMgdXAgdG8gZWFjaCBzZXJpYWxpemVyIHRvIGRldGVybWluZS5cbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCByZWxhdGlvbnNoaXBzOiB7IFsgcmVsYXRpb25zaGlwTmFtZTogc3RyaW5nIF06IFJlbGF0aW9uc2hpcENvbmZpZyB9O1xuXG4gIGFzeW5jIHJlbmRlcihhY3Rpb246IEFjdGlvbiwgcmVzcG9uc2U6IFNlcnZlclJlc3BvbnNlLCBib2R5OiBhbnksIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXNwb25zZS5zZXRIZWFkZXIoJ0NvbnRlbnQtdHlwZScsIHRoaXMuY29udGVudFR5cGUpO1xuICAgIGlmIChib2R5IGluc3RhbmNlb2YgRXJyb3JzLkh0dHBFcnJvcikge1xuICAgICAgcmVzcG9uc2Uuc3RhdHVzQ29kZSA9IGJvZHkuc3RhdHVzO1xuICAgIH1cbiAgICBib2R5ID0gYXdhaXQgdGhpcy5zZXJpYWxpemUoYWN0aW9uLCBib2R5LCBvcHRpb25zKTtcbiAgICBsZXQgaXNQcm9kdWN0aW9uID0gdGhpcy5jb250YWluZXIubG9va3VwKCdjb25maWc6ZW52aXJvbm1lbnQnKS5lbnZpcm9ubWVudCA9PT0gJ3Byb2R1Y3Rpb24nO1xuICAgIHJlc3BvbnNlLndyaXRlKEpTT04uc3RyaW5naWZ5KGJvZHkgLCBudWxsLCBpc1Byb2R1Y3Rpb24gPyAwIDogMikgfHwgJycpO1xuICAgIHJlc3BvbnNlLmVuZCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGFzeW5jIHNlcmlhbGl6ZShhY3Rpb246IEFjdGlvbiwgYm9keTogYW55LCBvcHRpb25zOiBSZW5kZXJPcHRpb25zKTogUHJvbWlzZTxhbnk+O1xuXG59XG4iXX0=