"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
;
/**
 * ES6 classes don't provide any native syntax or support for compositional mixins. This helper
 * method provides that support:
 *
 *     import { mixin } from 'denali';
 *     import MyMixin from '../mixins/my-mixin';
 *     import ApplicationAction from './application';
 *
 *     export default class MyAction extends mixin(ApplicationAction, MyMixin) {
 *       // ...
 *     }
 *
 * Objects that extend from Denali's Object class automatically get a static `mixin` method to make
 * the syntax a bit more familiar:
 *
 *     export default class MyAction extends ApplicationAction.mixin(MyMixin) {
 *
 * ## How it works
 *
 * Since ES6 classes are based on prototype chains, and protoype chains are purely linear (you can't
 * have two prototypes), we implement mixins by creating anonymous intermediate subclasses for each
 * applied mixin.
 *
 * Mixins are defined as factory functions that take a base class and extend it with their own
 * mixin properties/methods. When these mixin factory functions are applied, they are called in
 * order, with the result of the last mixin feeding into the base class of the next mixin factory.
 *
 * @package metal
 */
function mixin(baseClass, ...mixins) {
    return mixins.reduce((currentBase, mixinFactory) => {
        let appliedClass = mixinFactory._factory(currentBase, ...mixinFactory._args);
        assert(typeof appliedClass === 'function', `Invalid mixin (${appliedClass}) - did you forget to return your mixin class from the createMixin method?`);
        return appliedClass;
    }, baseClass);
}
exports.default = mixin;
/**
 * Creates a mixin factory function wrapper. These wrapper functions have the special property that
 * they can be invoked an arbitrary number of times, and each time will cache the arguments to be
 * handed off to the actual factory function.
 *
 * This is useful to allow per-use options for your mixin. For example:
 *
 *     class ProtectedAction extends Action.mixin(authenticate({ ... })) {
 *
 * In that example, the optons object provided to the `authenticate` mixin function will be cached,
 * and once the mixin factory function is invoked, it will be provided as an additional argument:
 *
 *     createMixin((BaseClass, options) => {
 *
 * @package metal
 */
function createMixin(mixinFactory) {
    let cacheMixinArguments = function (...args) {
        cacheMixinArguments._args.push(...args);
        return cacheMixinArguments;
    };
    cacheMixinArguments._args = [];
    cacheMixinArguments._factory = mixinFactory;
    return cacheMixinArguments;
}
exports.createMixin = createMixin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWl4aW4uanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FidXJkaW5lL1Byb2plY3RzL2RlbmFsaS9tYWluLyIsInNvdXJjZXMiOlsibGliL21ldGFsL21peGluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQWlDO0FBTWhDLENBQUM7QUFNRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTRCRztBQUNILGVBQThCLFNBQW1CLEVBQUUsR0FBRyxNQUFhO0lBQ2pFLE1BQU0sQ0FBTSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsV0FBcUIsRUFBRSxZQUF1QztRQUN2RixJQUFJLFlBQVksR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3RSxNQUFNLENBQUMsT0FBTyxZQUFZLEtBQUssVUFBVSxFQUFFLGtCQUFtQixZQUFhLDRFQUE0RSxDQUFDLENBQUM7UUFDekosTUFBTSxDQUFDLFlBQVksQ0FBQztJQUN0QixDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQU5ELHdCQU1DO0FBRUQ7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gscUJBQTRDLFlBQWdDO0lBQzFFLElBQUksbUJBQW1CLEdBQTBCLFVBQVMsR0FBRyxJQUFXO1FBQ3RFLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsbUJBQW1CLENBQUM7SUFDN0IsQ0FBQyxDQUFDO0lBQ0YsbUJBQW1CLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUMvQixtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDO0lBQzVDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztBQUM3QixDQUFDO0FBUkQsa0NBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuZXhwb3J0IGludGVyZmFjZSBNaXhpbkFwcGxpY2F0b3I8VCwgVSBleHRlbmRzIFQ+IHtcbiAgKC4uLmFyZ3M6IGFueVtdKTogTWl4aW5BcHBsaWNhdG9yPFQsIFU+O1xuICBfYXJnczogYW55W107XG4gIF9mYWN0b3J5OiBNaXhpbkZhY3Rvcnk8VCwgVT47XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1peGluRmFjdG9yeTxULCBVIGV4dGVuZHMgVD4ge1xuIChiYXNlQ2xhc3M6IFQsIC4uLmFyZ3M6IGFueVtdKTogVTtcbn1cblxuLyoqXG4gKiBFUzYgY2xhc3NlcyBkb24ndCBwcm92aWRlIGFueSBuYXRpdmUgc3ludGF4IG9yIHN1cHBvcnQgZm9yIGNvbXBvc2l0aW9uYWwgbWl4aW5zLiBUaGlzIGhlbHBlclxuICogbWV0aG9kIHByb3ZpZGVzIHRoYXQgc3VwcG9ydDpcbiAqXG4gKiAgICAgaW1wb3J0IHsgbWl4aW4gfSBmcm9tICdkZW5hbGknO1xuICogICAgIGltcG9ydCBNeU1peGluIGZyb20gJy4uL21peGlucy9teS1taXhpbic7XG4gKiAgICAgaW1wb3J0IEFwcGxpY2F0aW9uQWN0aW9uIGZyb20gJy4vYXBwbGljYXRpb24nO1xuICpcbiAqICAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBNeUFjdGlvbiBleHRlbmRzIG1peGluKEFwcGxpY2F0aW9uQWN0aW9uLCBNeU1peGluKSB7XG4gKiAgICAgICAvLyAuLi5cbiAqICAgICB9XG4gKlxuICogT2JqZWN0cyB0aGF0IGV4dGVuZCBmcm9tIERlbmFsaSdzIE9iamVjdCBjbGFzcyBhdXRvbWF0aWNhbGx5IGdldCBhIHN0YXRpYyBgbWl4aW5gIG1ldGhvZCB0byBtYWtlXG4gKiB0aGUgc3ludGF4IGEgYml0IG1vcmUgZmFtaWxpYXI6XG4gKlxuICogICAgIGV4cG9ydCBkZWZhdWx0IGNsYXNzIE15QWN0aW9uIGV4dGVuZHMgQXBwbGljYXRpb25BY3Rpb24ubWl4aW4oTXlNaXhpbikge1xuICpcbiAqICMjIEhvdyBpdCB3b3Jrc1xuICpcbiAqIFNpbmNlIEVTNiBjbGFzc2VzIGFyZSBiYXNlZCBvbiBwcm90b3R5cGUgY2hhaW5zLCBhbmQgcHJvdG95cGUgY2hhaW5zIGFyZSBwdXJlbHkgbGluZWFyICh5b3UgY2FuJ3RcbiAqIGhhdmUgdHdvIHByb3RvdHlwZXMpLCB3ZSBpbXBsZW1lbnQgbWl4aW5zIGJ5IGNyZWF0aW5nIGFub255bW91cyBpbnRlcm1lZGlhdGUgc3ViY2xhc3NlcyBmb3IgZWFjaFxuICogYXBwbGllZCBtaXhpbi5cbiAqXG4gKiBNaXhpbnMgYXJlIGRlZmluZWQgYXMgZmFjdG9yeSBmdW5jdGlvbnMgdGhhdCB0YWtlIGEgYmFzZSBjbGFzcyBhbmQgZXh0ZW5kIGl0IHdpdGggdGhlaXIgb3duXG4gKiBtaXhpbiBwcm9wZXJ0aWVzL21ldGhvZHMuIFdoZW4gdGhlc2UgbWl4aW4gZmFjdG9yeSBmdW5jdGlvbnMgYXJlIGFwcGxpZWQsIHRoZXkgYXJlIGNhbGxlZCBpblxuICogb3JkZXIsIHdpdGggdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBtaXhpbiBmZWVkaW5nIGludG8gdGhlIGJhc2UgY2xhc3Mgb2YgdGhlIG5leHQgbWl4aW4gZmFjdG9yeS5cbiAqXG4gKiBAcGFja2FnZSBtZXRhbFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaXhpbihiYXNlQ2xhc3M6IEZ1bmN0aW9uLCAuLi5taXhpbnM6IGFueVtdKTogYW55IHtcbiAgcmV0dXJuIDxhbnk+bWl4aW5zLnJlZHVjZSgoY3VycmVudEJhc2U6IEZ1bmN0aW9uLCBtaXhpbkZhY3Rvcnk6IE1peGluQXBwbGljYXRvcjxhbnksIGFueT4pID0+IHtcbiAgICBsZXQgYXBwbGllZENsYXNzID0gbWl4aW5GYWN0b3J5Ll9mYWN0b3J5KGN1cnJlbnRCYXNlLCAuLi5taXhpbkZhY3RvcnkuX2FyZ3MpO1xuICAgIGFzc2VydCh0eXBlb2YgYXBwbGllZENsYXNzID09PSAnZnVuY3Rpb24nLCBgSW52YWxpZCBtaXhpbiAoJHsgYXBwbGllZENsYXNzIH0pIC0gZGlkIHlvdSBmb3JnZXQgdG8gcmV0dXJuIHlvdXIgbWl4aW4gY2xhc3MgZnJvbSB0aGUgY3JlYXRlTWl4aW4gbWV0aG9kP2ApO1xuICAgIHJldHVybiBhcHBsaWVkQ2xhc3M7XG4gIH0sIGJhc2VDbGFzcyk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1peGluIGZhY3RvcnkgZnVuY3Rpb24gd3JhcHBlci4gVGhlc2Ugd3JhcHBlciBmdW5jdGlvbnMgaGF2ZSB0aGUgc3BlY2lhbCBwcm9wZXJ0eSB0aGF0XG4gKiB0aGV5IGNhbiBiZSBpbnZva2VkIGFuIGFyYml0cmFyeSBudW1iZXIgb2YgdGltZXMsIGFuZCBlYWNoIHRpbWUgd2lsbCBjYWNoZSB0aGUgYXJndW1lbnRzIHRvIGJlXG4gKiBoYW5kZWQgb2ZmIHRvIHRoZSBhY3R1YWwgZmFjdG9yeSBmdW5jdGlvbi5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCB0byBhbGxvdyBwZXItdXNlIG9wdGlvbnMgZm9yIHlvdXIgbWl4aW4uIEZvciBleGFtcGxlOlxuICpcbiAqICAgICBjbGFzcyBQcm90ZWN0ZWRBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ubWl4aW4oYXV0aGVudGljYXRlKHsgLi4uIH0pKSB7XG4gKlxuICogSW4gdGhhdCBleGFtcGxlLCB0aGUgb3B0b25zIG9iamVjdCBwcm92aWRlZCB0byB0aGUgYGF1dGhlbnRpY2F0ZWAgbWl4aW4gZnVuY3Rpb24gd2lsbCBiZSBjYWNoZWQsXG4gKiBhbmQgb25jZSB0aGUgbWl4aW4gZmFjdG9yeSBmdW5jdGlvbiBpcyBpbnZva2VkLCBpdCB3aWxsIGJlIHByb3ZpZGVkIGFzIGFuIGFkZGl0aW9uYWwgYXJndW1lbnQ6XG4gKlxuICogICAgIGNyZWF0ZU1peGluKChCYXNlQ2xhc3MsIG9wdGlvbnMpID0+IHtcbiAqXG4gKiBAcGFja2FnZSBtZXRhbFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWl4aW48VCwgVSBleHRlbmRzIFQ+KG1peGluRmFjdG9yeTogTWl4aW5GYWN0b3J5PFQsIFU+KTogTWl4aW5BcHBsaWNhdG9yPFQsIFU+IHtcbiAgbGV0IGNhY2hlTWl4aW5Bcmd1bWVudHMgPSA8TWl4aW5BcHBsaWNhdG9yPFQsIFU+PmZ1bmN0aW9uKC4uLmFyZ3M6IGFueVtdKTogTWl4aW5BcHBsaWNhdG9yPFQsIFU+IHtcbiAgICBjYWNoZU1peGluQXJndW1lbnRzLl9hcmdzLnB1c2goLi4uYXJncyk7XG4gICAgcmV0dXJuIGNhY2hlTWl4aW5Bcmd1bWVudHM7XG4gIH07XG4gIGNhY2hlTWl4aW5Bcmd1bWVudHMuX2FyZ3MgPSBbXTtcbiAgY2FjaGVNaXhpbkFyZ3VtZW50cy5fZmFjdG9yeSA9IG1peGluRmFjdG9yeTtcbiAgcmV0dXJuIGNhY2hlTWl4aW5Bcmd1bWVudHM7XG59XG4iXX0=