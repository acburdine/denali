"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const lodash_1 = require("lodash");
/**
 * A mock request used to simluate an HTTP request to the application during tests. You shouldn't
 * need to instantiate these directly - instead, use an AppAcceptance test.
 *
 * @package test
 */
class MockRequest extends stream_1.Transform {
    // tslint:enable:completed-docs
    constructor(options = {}) {
        super();
        this.socket = {
            remoteAddress: '123.45.67.89'
        };
        this._writableState.objectMode = true;
        this._readableState.objectMode = false;
        this.method = options.method || 'GET';
        this.url = options.url || '';
        this.headers = options.headers || {};
        this.method = this.method.toUpperCase();
        if (['POST', 'PUT', 'PATCH'].indexOf(this.method) > -1) {
            this.headers['Transfer-Encoding'] = 'chunked';
        }
        this.headers = lodash_1.mapValues(this.headers, lodash_1.toString);
        this.headers = lodash_1.mapKeys(this.headers, (value, key) => {
            return key.toLowerCase();
        });
        this.rawHeaders = lodash_1.flatten(lodash_1.toPairs(this.headers));
        if (['POST', 'PUT', 'PATCH'].indexOf(this.method) === -1) {
            delete this.headers['content-type'];
            this.rawHeaders = lodash_1.without(this.rawHeaders, 'content-type');
        }
    }
    _transform(chunk, encoding, next) {
        if (typeof chunk !== 'string' && !Buffer.isBuffer(chunk)) {
            chunk = JSON.stringify(chunk);
        }
        this.push(chunk);
        next();
    }
}
exports.default = MockRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hY2J1cmRpbmUvUHJvamVjdHMvZGVuYWxpL2RlbmFsaS8iLCJzb3VyY2VzIjpbImxpYi90ZXN0L21vY2stcmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyxtQ0FBaUY7QUFFakY7Ozs7O0dBS0c7QUFDSCxpQkFBaUMsU0FBUSxrQkFBUztJQXlCaEQsK0JBQStCO0lBRS9CLFlBQVksVUFBa0YsRUFBRTtRQUM5RixLQUFLLEVBQUUsQ0FBQztRQWRWLFdBQU0sR0FBRztZQUNQLGFBQWEsRUFBRSxjQUFjO1NBQzlCLENBQUM7UUFhQSxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBRXZDLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUM7UUFDdEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO1FBRXJDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUV4QyxFQUFFLENBQUMsQ0FBQyxDQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUNoRCxDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxrQkFBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsaUJBQVEsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxPQUFPLEdBQUcsZ0JBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUc7WUFDOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxVQUFVLEdBQUcsZ0JBQU8sQ0FBQyxnQkFBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRWpELEVBQUUsQ0FBQyxDQUFDLENBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxnQkFBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDN0QsQ0FBQztJQUNILENBQUM7SUFsQ1MsVUFBVSxDQUFDLEtBQTJCLEVBQUUsUUFBZ0IsRUFBRSxJQUFnQjtRQUNsRixFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6RCxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQixJQUFJLEVBQUUsQ0FBQztJQUNULENBQUM7Q0E4QkY7QUF0REQsOEJBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IHdpdGhvdXQsIHRvU3RyaW5nLCBtYXBWYWx1ZXMsIG1hcEtleXMsIGZsYXR0ZW4sIHRvUGFpcnMgfSBmcm9tICdsb2Rhc2gnO1xuXG4vKipcbiAqIEEgbW9jayByZXF1ZXN0IHVzZWQgdG8gc2ltbHVhdGUgYW4gSFRUUCByZXF1ZXN0IHRvIHRoZSBhcHBsaWNhdGlvbiBkdXJpbmcgdGVzdHMuIFlvdSBzaG91bGRuJ3RcbiAqIG5lZWQgdG8gaW5zdGFudGlhdGUgdGhlc2UgZGlyZWN0bHkgLSBpbnN0ZWFkLCB1c2UgYW4gQXBwQWNjZXB0YW5jZSB0ZXN0LlxuICpcbiAqIEBwYWNrYWdlIHRlc3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9ja1JlcXVlc3QgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuXG4gIC8vIE1vY2sgaW50ZXJuYWxzIG9mIEluY29taW5nTWVzc2FnZVxuICAvLyB0c2xpbnQ6ZGlzYWJsZTpjb21wbGV0ZWQtZG9jcyBtZW1iZXItYWNjZXNzXG4gIG1ldGhvZDogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbiAgaGVhZGVyczoge1xuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZ1xuICB9O1xuICByYXdIZWFkZXJzOiBzdHJpbmdbXTtcblxuICBfd3JpdGFibGVTdGF0ZTogYW55O1xuICBfcmVhZGFibGVTdGF0ZTogYW55O1xuXG4gIHNvY2tldCA9IHtcbiAgICByZW1vdGVBZGRyZXNzOiAnMTIzLjQ1LjY3Ljg5J1xuICB9O1xuXG4gIHByb3RlY3RlZCBfdHJhbnNmb3JtKGNodW5rOiBzdHJpbmcgfCBCdWZmZXIgfCB7fSwgZW5jb2Rpbmc6IHN0cmluZywgbmV4dDogKCkgPT4gdm9pZCkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSB7XG4gICAgICBjaHVuayA9IEpTT04uc3RyaW5naWZ5KGNodW5rKTtcbiAgICB9XG4gICAgdGhpcy5wdXNoKGNodW5rKTtcbiAgICBuZXh0KCk7XG4gIH1cbiAgLy8gdHNsaW50OmVuYWJsZTpjb21wbGV0ZWQtZG9jc1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IHsgbWV0aG9kPzogc3RyaW5nLCB1cmw/OiBzdHJpbmcsIGhlYWRlcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9IH0gPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5vYmplY3RNb2RlID0gdHJ1ZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLm9iamVjdE1vZGUgPSBmYWxzZTtcblxuICAgIHRoaXMubWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgJ0dFVCc7XG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJztcbiAgICB0aGlzLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge307XG5cbiAgICB0aGlzLm1ldGhvZCA9IHRoaXMubWV0aG9kLnRvVXBwZXJDYXNlKCk7XG5cbiAgICBpZiAoWyAnUE9TVCcsICdQVVQnLCAnUEFUQ0gnIF0uaW5kZXhPZih0aGlzLm1ldGhvZCkgPiAtMSkge1xuICAgICAgdGhpcy5oZWFkZXJzWydUcmFuc2Zlci1FbmNvZGluZyddID0gJ2NodW5rZWQnO1xuICAgIH1cblxuICAgIHRoaXMuaGVhZGVycyA9IG1hcFZhbHVlcyh0aGlzLmhlYWRlcnMsIHRvU3RyaW5nKTtcbiAgICB0aGlzLmhlYWRlcnMgPSBtYXBLZXlzKHRoaXMuaGVhZGVycywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHJldHVybiBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcbiAgICB0aGlzLnJhd0hlYWRlcnMgPSBmbGF0dGVuKHRvUGFpcnModGhpcy5oZWFkZXJzKSk7XG5cbiAgICBpZiAoWyAnUE9TVCcsICdQVVQnLCAnUEFUQ0gnIF0uaW5kZXhPZih0aGlzLm1ldGhvZCkgPT09IC0xKSB7XG4gICAgICBkZWxldGUgdGhpcy5oZWFkZXJzWydjb250ZW50LXR5cGUnXTtcbiAgICAgIHRoaXMucmF3SGVhZGVycyA9IHdpdGhvdXQodGhpcy5yYXdIZWFkZXJzLCAnY29udGVudC10eXBlJyk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==