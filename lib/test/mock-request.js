"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const lodash_1 = require("lodash");
/**
 * A mock request used to simluate an HTTP request to the application during tests. You shouldn't
 * need to instantiate these directly - instead, use an AppAcceptance test.
 *
 * @package test
 */
class MockRequest extends stream_1.Transform {
    constructor(options = {}) {
        super();
        this.socket = {
            remoteAddress: '123.45.67.89'
        };
        this._writableState.objectMode = true;
        this._readableState.objectMode = false;
        this.method = options.method || 'GET';
        this.url = options.url || '';
        this.headers = options.headers || {};
        this.method = this.method.toUpperCase();
        if (['POST', 'PUT', 'PATCH'].indexOf(this.method) > -1) {
            this.headers['Transfer-Encoding'] = 'chunked';
        }
        this.headers = lodash_1.mapValues(this.headers, lodash_1.toString);
        this.headers = lodash_1.mapKeys(this.headers, (value, key) => {
            return key.toLowerCase();
        });
        this.rawHeaders = lodash_1.flatten(lodash_1.toPairs(this.headers));
        if (['POST', 'PUT', 'PATCH'].indexOf(this.method) === -1) {
            delete this.headers['content-type'];
            this.rawHeaders = lodash_1.without(this.rawHeaders, 'content-type');
        }
    }
    _transform(chunk, encoding, next) {
        if (typeof chunk !== 'string' && !Buffer.isBuffer(chunk)) {
            chunk = JSON.stringify(chunk);
        }
        this.push(chunk);
        next();
    }
}
exports.default = MockRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hYnVyZGluZS9Qcm9qZWN0cy9kZW5hbGkvbWFpbi8iLCJzb3VyY2VzIjpbImxpYi90ZXN0L21vY2stcmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyxtQ0FBaUY7QUFFakY7Ozs7O0dBS0c7QUFDSCxpQkFBaUMsU0FBUSxrQkFBUztJQWtCaEQsWUFBWSxVQUFrRixFQUFFO1FBQzlGLEtBQUssRUFBRSxDQUFDO1FBTFYsV0FBTSxHQUFHO1lBQ1AsYUFBYSxFQUFFLGNBQWM7U0FDOUIsQ0FBQztRQUlBLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFFdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQztRQUN0QyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFFckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXhDLEVBQUUsQ0FBQyxDQUFDLENBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQ2hELENBQUM7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLGtCQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxpQkFBUSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sR0FBRyxnQkFBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRztZQUM5QyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFVBQVUsR0FBRyxnQkFBTyxDQUFDLGdCQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFakQsRUFBRSxDQUFDLENBQUMsQ0FBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsVUFBVSxHQUFHLGdCQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUM3RCxDQUFDO0lBQ0gsQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUEyQixFQUFFLFFBQWdCLEVBQUUsSUFBZ0I7UUFDeEUsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekQsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakIsSUFBSSxFQUFFLENBQUM7SUFDVCxDQUFDO0NBR0Y7QUF0REQsOEJBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB7IHdpdGhvdXQsIHRvU3RyaW5nLCBtYXBWYWx1ZXMsIG1hcEtleXMsIGZsYXR0ZW4sIHRvUGFpcnMgfSBmcm9tICdsb2Rhc2gnO1xuXG4vKipcbiAqIEEgbW9jayByZXF1ZXN0IHVzZWQgdG8gc2ltbHVhdGUgYW4gSFRUUCByZXF1ZXN0IHRvIHRoZSBhcHBsaWNhdGlvbiBkdXJpbmcgdGVzdHMuIFlvdSBzaG91bGRuJ3RcbiAqIG5lZWQgdG8gaW5zdGFudGlhdGUgdGhlc2UgZGlyZWN0bHkgLSBpbnN0ZWFkLCB1c2UgYW4gQXBwQWNjZXB0YW5jZSB0ZXN0LlxuICpcbiAqIEBwYWNrYWdlIHRlc3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTW9ja1JlcXVlc3QgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuXG4gIC8vIE1vY2sgaW50ZXJuYWxzIG9mIEluY29taW5nTWVzc2FnZVxuICAvLyB0c2xpbnQ6ZGlzYWJsZTpjb21wbGV0ZWQtZG9jcyBtZW1iZXItYWNjZXNzXG4gIG1ldGhvZDogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbiAgaGVhZGVyczoge1xuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZ1xuICB9O1xuICByYXdIZWFkZXJzOiBzdHJpbmdbXTtcblxuICBfd3JpdGFibGVTdGF0ZTogYW55O1xuICBfcmVhZGFibGVTdGF0ZTogYW55O1xuXG4gIHNvY2tldCA9IHtcbiAgICByZW1vdGVBZGRyZXNzOiAnMTIzLjQ1LjY3Ljg5J1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IHsgbWV0aG9kPzogc3RyaW5nLCB1cmw/OiBzdHJpbmcsIGhlYWRlcnM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9IH0gPSB7fSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5vYmplY3RNb2RlID0gdHJ1ZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLm9iamVjdE1vZGUgPSBmYWxzZTtcblxuICAgIHRoaXMubWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgJ0dFVCc7XG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJztcbiAgICB0aGlzLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge307XG5cbiAgICB0aGlzLm1ldGhvZCA9IHRoaXMubWV0aG9kLnRvVXBwZXJDYXNlKCk7XG5cbiAgICBpZiAoWyAnUE9TVCcsICdQVVQnLCAnUEFUQ0gnIF0uaW5kZXhPZih0aGlzLm1ldGhvZCkgPiAtMSkge1xuICAgICAgdGhpcy5oZWFkZXJzWydUcmFuc2Zlci1FbmNvZGluZyddID0gJ2NodW5rZWQnO1xuICAgIH1cblxuICAgIHRoaXMuaGVhZGVycyA9IG1hcFZhbHVlcyh0aGlzLmhlYWRlcnMsIHRvU3RyaW5nKTtcbiAgICB0aGlzLmhlYWRlcnMgPSBtYXBLZXlzKHRoaXMuaGVhZGVycywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHJldHVybiBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcbiAgICB0aGlzLnJhd0hlYWRlcnMgPSBmbGF0dGVuKHRvUGFpcnModGhpcy5oZWFkZXJzKSk7XG5cbiAgICBpZiAoWyAnUE9TVCcsICdQVVQnLCAnUEFUQ0gnIF0uaW5kZXhPZih0aGlzLm1ldGhvZCkgPT09IC0xKSB7XG4gICAgICBkZWxldGUgdGhpcy5oZWFkZXJzWydjb250ZW50LXR5cGUnXTtcbiAgICAgIHRoaXMucmF3SGVhZGVycyA9IHdpdGhvdXQodGhpcy5yYXdIZWFkZXJzLCAnY29udGVudC10eXBlJyk7XG4gICAgfVxuICB9XG5cbiAgX3RyYW5zZm9ybShjaHVuazogc3RyaW5nIHwgQnVmZmVyIHwge30sIGVuY29kaW5nOiBzdHJpbmcsIG5leHQ6ICgpID0+IHZvaWQpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgICAgY2h1bmsgPSBKU09OLnN0cmluZ2lmeShjaHVuayk7XG4gICAgfVxuICAgIHRoaXMucHVzaChjaHVuayk7XG4gICAgbmV4dCgpO1xuICB9XG4gIC8vIHRzbGludDplbmFibGU6Y29tcGxldGVkLWRvY3NcblxufVxuIl19